name: Deploy
on:
  push:
    branches: main

# Concurrency group name ensures concurrent workflow runs wait for any in-progress job to finish
concurrency:
  group: merge-${{ github.ref }}

permissions:
  actions: read # Required by codeQL
  security-events: write # Required by codeQL
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  lint:
    uses: ./.github/workflows/lint.yaml
  codeql:
    uses: ./.github/workflows/codeql.yaml
  deploy:
    needs: [lint, codeql]
    name: "Deploy App"
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: ${{steps.process-url.outputs.DEPLOY_URL}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: "./.github/setup"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/${{vars.PROD_GITHUB_ROLE}}
          role-duration-seconds: 3600
          aws-region: ${{vars.PROD_AWS_REGION}}

      - name: Cache Next.js
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/packages/site/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('packages/site/**/package-lock.json') }}-${{ hashFiles('packages/site/**/*.js', 'packages/site/**/*.jsx', 'packages/site/**/*.ts', 'packages/site/**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('packages/site/**/package-lock.json') }}-

      - name: Pre-deploy app
        env:
          PROD_GITHUB_ORG: ${{github.repository_owner}}
          PROD_GITHUB_REPO: ${{github.event.repository.name}}
          PROD_GITHUB_ROLE: ${{vars.PROD_GITHUB_ROLE}}
          PROD_AWS_REGION: ${{vars.PROD_AWS_REGION}}
          PROD_DEPLOY_PREP_STAGE: "YES"
        run: pnpm sst deploy --stage prod
      - name: Deploy app
        id: deploy
        env:
          PROD_GITHUB_ORG: ${{github.repository_owner}}
          PROD_GITHUB_REPO: ${{github.event.repository.name}}
          PROD_GITHUB_ROLE: ${{vars.PROD_GITHUB_ROLE}}
          PROD_AWS_REGION: ${{vars.PROD_AWS_REGION}}
        run: |
          echo "SST_OUTPUT=$(pnpm sst deploy --stage prod)" >> $GITHUB_OUTPUT
      - name: Process deploy URL
        id: process-url
        run: |
          echo `expr "${steps.deploy.outputs.SST_OUTPUT}" : '.*SiteUrl:[[:space:]]\(https:\/\/[a-zA-Z.]*\.com\)'` >> $GITHUB_OUTPUT
