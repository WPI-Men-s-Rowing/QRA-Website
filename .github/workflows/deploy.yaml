name: Deploy
on:
  push:
    branches: main

# Concurrency group name ensures concurrent workflow runs wait for any in-progress job to finish
concurrency:
  group: merge-${{ github.ref }}

permissions:
  actions: read # Required by codeQL
  security-events: write # Required by codeQL
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  lint:
    uses: ./.github/workflows/lint.yaml
  codeql:
    uses: ./.github/workflows/codeql.yaml
  test:
    uses: ./.github/workflows/test.yaml
  deploy:
    needs: [lint, codeql]
    name: "Deploy App"
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: ${{steps.url-regex.outputs.group1}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: "./.github/setup"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/${{vars.PROD_GITHUB_ROLE}}
          role-duration-seconds: 3600
          aws-region: ${{vars.PROD_AWS_REGION}}

      - name: Cache SST
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.sst/cache
          # Generate a new cache for each stack setup
          key: ${{ runner.os }}-sst-${{ hashFiles('sst.config.ts', 'stacks/**/*') }}-${{ github.sha }}
          # Rebuild from the last SST cache on this OS
          restore-keys: |
            ${{ runner.os }}-sst-
      - name: Cache Next.js site
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/packages/site/.next/cache
          # Generate a new cache whenever packages or source files change
          key: ${{ runner.os }}-nextjs-site-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('packages/site/**/*.js', 'packages/site/**/*.jsx', 'packages/site/**/*.ts', 'packages/site/**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache
          restore-keys: |
            ${{ runner.os }}-nextjs-site-${{ hashFiles('pnpm-lock.yaml') }}-
      - name: Cache Next.js maintenance
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/packages/maintenance/.next/cache
          # Generate a new cache whenever packages or source files change
          key: ${{ runner.os }}-nextjs-maintenance-${{ hashFiles('pnpm-lock.yaml') }}-${{ hashFiles('packages/maintenance/**/*.js', 'packages/maintenance/**/*.jsx', 'packages/maintenance/**/*.ts', 'packages/maintenance/**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache
          restore-keys: |
            ${{ runner.os }}-nextjs-maintenance-${{ hashFiles('pnpm-lock.yaml') }}-

      - name: Pre-deploy app
        env:
          PROD_GITHUB_ORG: ${{github.repository_owner}}
          PROD_GITHUB_REPO: ${{github.event.repository.name}}
          PROD_GITHUB_ROLE: ${{vars.PROD_GITHUB_ROLE}}
          PROD_AWS_REGION: ${{vars.PROD_AWS_REGION}}
          PROD_DEPLOY_PREP_STAGE: "YES"
        run: pnpm sst deploy --stage prod
      - name: Deploy app
        env:
          PROD_GITHUB_ORG: ${{github.repository_owner}}
          PROD_GITHUB_REPO: ${{github.event.repository.name}}
          PROD_GITHUB_ROLE: ${{vars.PROD_GITHUB_ROLE}}
          PROD_AWS_REGION: ${{vars.PROD_AWS_REGION}}
        run: pnpm sst deploy --stage prod

      - name: Save SST Output
        id: sst-out
        run: echo SST_OUT=$(cat ${{github.workspace}}/.sst/outputs.json) >> $GITHUB_OUTPUT
      - name: Process deploy URL regex
        id: url-regex
        uses: actions-ecosystem/action-regex-match@v2
        with:
          text: ${{steps.sst-out.outputs.SST_OUT}}
          regex: '\"SiteUrl\":\s\"(https:\/\/[a-zA-Z1-9.]*\.(com|net|org))\"'
          flags: gm
